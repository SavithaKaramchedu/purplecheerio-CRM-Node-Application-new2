const path=require("path");
const fs = require("fs");
const TargetDeployment = require("./target.js");
class TargetDeploymentAws extends TargetDeployment {
    constructor(destdir, tmpdir, tmpLaunchDir, tmpLaunchDir1, deployconfig)
    {
        super(destdir, tmpdir, tmpLaunchDir, tmpLaunchDir1, deployconfig);
        this.pathsSF = {};
        this.serviceFrom = {};
        this.serviceTo = {};

    }
    PrepCmdBefore(ts, dpcw)
    {
        this.deployconfig.targets[ts].strPrepCmds += "pwdsave=$(pwd)\n";
        this.deployconfig.targets[ts].strPrepCmds += "cd "+dpcw+"\n";
        this.deployconfig.targets[ts].strPrepCmds += "tar -czf "+path.resolve(this.tmpLaunchDir,"pcw.tar.gz")+" .\n";
        this.deployconfig.targets[ts].strPrepCmds += "cd $pwdsave\n";

    }

    PrepCmdAfter(ts)
    {
    }

    PrepCmdManager(ts, i)
    {
        this.deployconfig.targets[ts].strPrepCmds += "# -------------------------------------------\n";
        this.deployconfig.targets[ts].strPrepCmds += "# Setting up machine "+i+"\n";
        this.deployconfig.targets[ts].strPrepCmds += "# -------------------------------------------\n";
    
        this.deployconfig.targets[ts].strPrepCmds += "ssh -i  "+this.deployconfig.targets[ts].managers[i].pem+" "+this.deployconfig.targets[ts].managers[i].user+"@"+this.deployconfig.targets[ts].managers[i].machine+" sudo \"curl -sL https://deb.nodesource.com/setup_8.x | sudo bash -\""+"\n";
        this.deployconfig.targets[ts].strPrepCmds += "ssh -i  "+this.deployconfig.targets[ts].managers[i].pem+" "+this.deployconfig.targets[ts].managers[i].user+"@"+this.deployconfig.targets[ts].managers[i].machine+" sudo apt-get install -y nodejs"+"\n";
        this.deployconfig.targets[ts].strPrepCmds += "scp -i "+this.deployconfig.targets[ts].managers[i].pem+" "+path.resolve(this.tmpLaunchDir, "pcw.tar.gz")+" "+this.deployconfig.targets[ts].managers[i].user+"@"+this.deployconfig.targets[ts].managers[i].machine+":~\n";
        this.deployconfig.targets[ts].strPrepCmds += "ssh -i  "+this.deployconfig.targets[ts].managers[i].pem+" "+this.deployconfig.targets[ts].managers[i].user+"@"+this.deployconfig.targets[ts].managers[i].machine+" tar -xzf pcw.tar.gz -C . --strip-components 1"+"\n";

        this.deployconfig.targets[ts].strPrepCmds += "scp -i "+this.deployconfig.targets[ts].managers[i].pem+" "+path.resolve(this.tmpdir, ts+"_setup.sh")+" "+this.deployconfig.targets[ts].managers[i].user+"@"+this.deployconfig.targets[ts].managers[i].machine+":~\n";

        this.deployconfig.targets[ts].strPrepCmds += "# Copying service files to home directory\n";
        for(var s in this.pathsSF)
        {
            this.deployconfig.targets[ts].strPrepCmds += "  # Copying "+s+"\n";
            if(this.serviceFrom[s])
                this.deployconfig.targets[ts].strPrepCmds += "    scp -i "+this.deployconfig.targets[ts].managers[i].pem+" "+path.resolve(this.tmpdir, this.serviceFrom[s])+" "+this.deployconfig.targets[ts].managers[i].user+"@"+this.deployconfig.targets[ts].managers[i].machine+":"+this.deployconfig.targets[ts].homedir+"\n";
            this.deployconfig.targets[ts].strPrepCmds += "    scp -i "+this.deployconfig.targets[ts].managers[i].pem+" "+this.tmpdir+"/"+s+".service"+" "+this.deployconfig.targets[ts].managers[i].user+"@"+this.deployconfig.targets[ts].managers[i].machine+":"+this.deployconfig.targets[ts].homedir+"\n";
            this.deployconfig.targets[ts].strPrepCmds += "    scp -i "+this.deployconfig.targets[ts].managers[i].pem+" "+this.tmpdir+"/"+s+".bash"+" "+this.deployconfig.targets[ts].managers[i].user+"@"+this.deployconfig.targets[ts].managers[i].machine+":"+this.deployconfig.targets[ts].homedir+"\n";
        }
        if(this.deployconfig.npminstallpc)
        {
            // do the proper npm install.
            this.deployconfig.targets[s].strPrepCmds += "ssh -i  "+this.deployconfig.targets[ts].managers[i].pem+" "+this.deployconfig.targets[ts].managers[i].user+"@"+this.deployconfig.targets[ts].managers[i].machine+" npm install cirruswave\n";
        }
        if(this.deployconfig.npminstall)
        {
            this.deployconfig.targets[ts].strPrepCmds += "ssh -i  "+this.deployconfig.targets[ts].managers[i].pem+" "+this.deployconfig.targets[ts].managers[i].user+"@"+this.deployconfig.targets[ts].managers[i].machine+' npm install\n';
        }
  
        this.deployconfig.targets[ts].strPrepCmds += "ssh -i  "+this.deployconfig.targets[ts].managers[i].pem+" "+this.deployconfig.targets[ts].managers[i].user+"@"+this.deployconfig.targets[ts].managers[i].machine+" bash "+ts+"_setup.sh\n";
    }
    PrepCmdWrite(ts)
    {
        this.deployconfig.targets[ts].strPrepCmds += "rm "+path.resolve(this.tmpLaunchDir,"pcw.tar.gz")+"\n";
        fs.writeFileSync(path.resolve(this.destdir, ts+"deploy.sh"), this.deployconfig.targets[ts].strPrepCmds);
        fs.writeFileSync(path.resolve(this.tmpdir, ts+"_setup.sh"), this.strSetupServices);
    }
    Servicify(ts, appserviceconfig, sysconfig, sysdeploy)
    {
        var service;
        var sconfig = null;
   
        if(!sysdeploy)
        {
            sconfig = appserviceconfig;
        }
        else
        {
            sconfig = sysconfig;
        }
        if(!this.strSetupServices)
            this.strSetupServices = "# bash script to setup all the services\n";

    
        for(var s in sconfig.services)
        {
            var strService = "";

            if(!sysdeploy)
            {
               service = this.deployconfig.appservices[s];
            }
            else
            {
                service = this.deployconfig.systemservices[s];
            }
            this.strSetupServices += "# setting up service "+s+"\n";
 
            //strService = "#systemd service to be setup for "+s;
            var sc = sconfig.services[s];
            strService += "[Unit]\n";
            if(sc.description)
                strService += "Description="+sc.description+"\n";
            else
                strService += "Description=description for service "+s+"\n";
            // strService += "After=network.target"
            
            strService += "\n[Service]\n";
            strService += "User=ubuntu\n";
            strService += "ExecStart="+this.deployconfig.targets[ts].homedir+"/"+s+".bash\n";



            strService += "Restart=on-failure\n";
            
            strService += "\n[Install]\n";
            strService += "WantedBy=multi-user.target\n";
            strService += "\n";
            this.pathsSF[s] = path.resolve(this.tmpdir, s+".service");
            if(service.fromDir)
            {
                this.serviceFrom[s] = service.fromDir+"/"+service.fromFile;
                this.serviceTo[s] = service.toDir+"/"+service.toFile+'\n';
            }
            fs.writeFileSync(this.pathsSF[s], strService);
            var strBash = "";
            strBash += "#!/bin/sh\n\n";

            strBash += "#systemd service will execute this shell script\n";
            strBash += "cd "+this.deployconfig.targets[ts].homedir+"\n";
            if(service.workingdir)
                strBash += "cd "+service.workingdir+"\n";
            strBash += service.exec+"\n";
            fs.writeFileSync(path.resolve(this.tmpdir, s+".bash"), strBash);

            // Setup the systemd service
                // stopping the service
                // by copying the .service files to /lib/systemd/system,
                // reloading and restarting the service
                // Also enable the service so that it will auto restart on boot
            
            //this.strSetupServices += "    echo stopping "+s+"\n";
            this.strSetupServices += "    sudo systemctl stop "+s+"\n";
            this.strSetupServices +=  "    sudo cp "+this.deployconfig.targets[ts].homedir+"/"+s+".service /lib/systemd/system\n";
            this.strSetupServices +=  "    chmod +x "+s+".bash\n";
            
            // this.strSetupServices += "    echo reloading "+s+"\n";
            this.strSetupServices += "    sudo systemctl daemon-reload\n";
            
            //this.strSetupServices += "    echo starting "+s+"\n";
            this.strSetupServices += "    sudo systemctl start "+s+"\n";
            
            //this.strSetupServices += "    echo enabling "+s+"\n";
            this.strSetupServices += "    sudo systemctl enable "+s+"\n";
        }   
        //this.strSetupServices += "    sudo systemctl daemon-reload\n";
    }
}
module.exports = TargetDeploymentAws;